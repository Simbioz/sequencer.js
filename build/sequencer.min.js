var Handle=function(e){var n=this,t=[];"undefined"!=typeof e&&t.push(e),this.isReleased=!1,this.addOnReleaseHandler=function(e){t.push(e)},this.release=function(){n.isReleased||(n.isReleased=!0,t.forEach(function(e){e()}))}},Sequencer=function(){function e(){a||(a=!0,t())}function n(){return 0!=i.length?!1:(a=!1,!0)}function t(){if(!n()){var e=new Handle(function(){o=null,s=null,t()}),a=i.shift();o=a,s=e,a.perform(e)}}var i=[],o=null,s=null,a=!1;this.push=function(n){i.push(n),e()},this.clear=function(){i=[],null!==o&&"undefined"!=typeof o.cancel&&o.cancel(s)}},DoTask=function(e){this.perform=function(n){e(),n.release()}};Sequencer.prototype["do"]=function(e){return this.push(new DoTask(e)),this};var DoWaitTask=function(e){var n=null;this.perform=function(t){n=setTimeout(t.release,e)},this.cancel=function(e){null!==n&&clearTimeout(n),e.release()}};Sequencer.prototype.doWait=function(e){return this.push(new DoWaitTask(e)),this};var DoWaitForHandleTask=function(e){this.perform=function(n){return e.isReleased?void n.release():void e.addOnReleaseHandler(n.release)},this.cancel=function(e){e.release()}};Sequencer.prototype.doWaitForHandle=function(e){return this.push(new DoWaitForHandleTask(e)),this};var DoWithHandleTask=function(e){this.perform=function(n){e(n)},this.cancel=function(e){e.release()}};Sequencer.prototype.doWithHandle=function(e){return this.push(new DoWithHandleTask(e)),this};